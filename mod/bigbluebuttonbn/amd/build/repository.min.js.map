{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Repository to perform WS calls for mod_bigbluebuttonbn.\r\n *\r\n * @module      mod_bigbluebuttonbn/repository\r\n * @copyright   2021 Blindside Networks Inc\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {call as fetchMany} from 'core/ajax';\r\n\r\n/**\r\n * Fetch the list of recordings from the server.\r\n *\r\n * @param   {Number} bigbluebuttonbnid The instance ID\r\n * @param   {String} tools the set of tools to display\r\n * @param   {number} groupid\r\n * @returns {Promise}\r\n */\r\nexport const fetchRecordings = (bigbluebuttonbnid, tools, groupid) => {\r\n    const args = {\r\n        bigbluebuttonbnid,\r\n        tools,\r\n    };\r\n\r\n    if (groupid) {\r\n        args.groupid = groupid;\r\n    }\r\n\r\n    return fetchMany([{methodname: 'mod_bigbluebuttonbn_get_recordings', args}])[0];\r\n};\r\n\r\n/**\r\n * Fetch the list of recordings from the server that can be imported.\r\n *\r\n * @param   {Number} destinationinstanceid The destination instance ID\r\n * @param   {Number} sourcebigbluebuttonbnid The original instance ID\r\n * @param   {Number} sourcecourseid The destination instance ID\r\n * @param   {String} tools the set of tools to display\r\n * @param   {number} groupid\r\n * @returns {Promise}\r\n */\r\nexport const fetchRecordingsToImport = (\r\n    destinationinstanceid,\r\n    sourcebigbluebuttonbnid,\r\n    sourcecourseid,\r\n    tools,\r\n    groupid\r\n) => {\r\n    const args = {\r\n        destinationinstanceid,\r\n        sourcebigbluebuttonbnid,\r\n        sourcecourseid,\r\n        tools,\r\n    };\r\n\r\n    if (groupid) {\r\n        args.groupid = groupid;\r\n    }\r\n\r\n    return fetchMany([{methodname: 'mod_bigbluebuttonbn_get_recordings_to_import', args}])[0];\r\n};\r\n\r\n/**\r\n * Perform an update on a single recording.\r\n *\r\n * @param   {object} args The instance ID\r\n * @returns {Promise}\r\n */\r\nexport const updateRecording = args => fetchMany([\r\n    {\r\n        methodname: 'mod_bigbluebuttonbn_update_recording',\r\n        args,\r\n    }\r\n])[0];\r\n\r\n/**\r\n * End the Meeting\r\n *\r\n * @param {number} bigbluebuttonbnid\r\n * @param {number} groupid\r\n * @returns {Promise}\r\n */\r\nexport const endMeeting = (bigbluebuttonbnid, groupid) => fetchMany([\r\n    {\r\n        methodname: 'mod_bigbluebuttonbn_end_meeting',\r\n        args: {\r\n            bigbluebuttonbnid,\r\n            groupid\r\n        },\r\n    }\r\n])[0];\r\n\r\n/**\r\n * Validate completion.\r\n *\r\n * @param {number} bigbluebuttonbnid\r\n * @returns {Promise}\r\n */\r\nexport const completionValidate = (bigbluebuttonbnid) => fetchMany([\r\n    {\r\n        methodname: 'mod_bigbluebuttonbn_completion_validate',\r\n        args: {\r\n            bigbluebuttonbnid\r\n        },\r\n    }\r\n])[0];\r\n\r\n\r\n/**\r\n * Fetch meeting info for the specified meeting.\r\n *\r\n * @param {number} bigbluebuttonbnid\r\n * @param {number} groupid\r\n * @param {boolean} [updatecache=false]\r\n * @returns {Promise}\r\n */\r\nexport const getMeetingInfo = (bigbluebuttonbnid, groupid, updatecache = false) => fetchMany([\r\n    {\r\n        methodname: 'mod_bigbluebuttonbn_meeting_info',\r\n        args: {\r\n            bigbluebuttonbnid,\r\n            groupid,\r\n            updatecache,\r\n        },\r\n    }\r\n])[0];\r\n"],"names":["bigbluebuttonbnid","tools","groupid","args","methodname","destinationinstanceid","sourcebigbluebuttonbnid","sourcecourseid","updatecache"],"mappings":"6UAiC+B,CAACA,kBAAmBC,MAAOC,iBAChDC,KAAO,CACTH,kBAAAA,kBACAC,MAAAA,cAGAC,UACAC,KAAKD,QAAUA,UAGZ,cAAU,CAAC,CAACE,WAAY,qCAAsCD,KAAAA,QAAQ,qCAa1C,CACnCE,sBACAC,wBACAC,eACAN,MACAC,iBAEMC,KAAO,CACTE,sBAAAA,sBACAC,wBAAAA,wBACAC,eAAAA,eACAN,MAAAA,cAGAC,UACAC,KAAKD,QAAUA,UAGZ,cAAU,CAAC,CAACE,WAAY,+CAAgDD,KAAAA,QAAQ,6BAS5DA,OAAQ,cAAU,CAC7C,CACIC,WAAY,uCACZD,KAAAA,QAEL,uBASuB,CAACH,kBAAmBE,WAAY,cAAU,CAChE,CACIE,WAAY,kCACZD,KAAM,CACFH,kBAAAA,kBACAE,QAAAA,YAGT,+BAQgCF,oBAAsB,cAAU,CAC/D,CACII,WAAY,0CACZD,KAAM,CACFH,kBAAAA,sBAGT,2BAW2B,SAACA,kBAAmBE,aAASM,2EAAwB,cAAU,CACzF,CACIJ,WAAY,mCACZD,KAAM,CACFH,kBAAAA,kBACAE,QAAAA,QACAM,YAAAA,gBAGT"}